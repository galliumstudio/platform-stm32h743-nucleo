import os
import re
import sys
from distutils.dir_util import copy_tree
import AddActHelper as helper

if len(sys.argv) < 3:
    print("Enter active object and region name.")
    exit()

tempAct = 'Sample'
tempReg = 'SampleReg'
actObj = sys.argv[1]
region = sys.argv[2]

src = "./src/Template/" + tempAct
actPath = "./src/" + actObj

if os.path.exists(actPath):
    print("Path", actPath, "already exists.")
    exit()

#Copy from template to new active object folder.
print('Creating {0}...'.format(actPath))
copy_tree(src, actPath)

#Rename active object filenames
actFiles = [actPath + '/' + name for name in os.listdir(actPath)]
for fileName in actFiles:
    if os.path.isfile(fileName):
        os.rename(fileName, fileName.replace(tempAct, actObj))
actFiles = [actPath + '/' + name for name in os.listdir(actPath)]        

#Rename region folder.
regPath = actPath + '/' + region
os.rename(actPath + '/' + tempReg, regPath)

#Rename region files.
regFiles = [regPath + '/' + name for name in os.listdir(regPath)]
for fileName in regFiles:
    if os.path.isfile(fileName):
        os.rename(fileName, fileName.replace(tempReg, region))
regFiles = [regPath + '/' + name for name in os.listdir(regPath)]        
        
#Replace region class names, variable names and event names.
#Replace active object class names, variable names and event names.

#Return dictionary holding class, variable and event names of the specified class.
def GetNames(baseName):
    token = re.sub('(?<!^)([A-Z][a-z]+)', r' \1', baseName).split()
    token[0] = token[0].lower()
    retVal = {}
    retVal['class'] = baseName
    retVal['var'] = "".join(token)
    retVal['event'] = "_".join([t.upper() for t in token])
    return retVal

tempActNames = GetNames(tempAct)
tempRegNames = GetNames(tempReg)
actObjNames = GetNames(actObj)
regionNames = GetNames(region)
print(tempActNames)
print(tempRegNames)
print(actObjNames)
print(regionNames)

def ReplaceNames(buf, fromNames, toNames):
    for key in fromNames.keys():
        buf = re.sub(fromNames[key], toNames[key], buf)
    return buf

#Process file list.
def ProcessFiles(fileList):
    for fileName in fileList:
        if os.path.isfile(fileName):
            print(fileName)
            f = open(fileName, 'rt')
            buf = f.read()
            f.close()
            #Do region before actObj.
            buf = ReplaceNames(buf, tempRegNames, regionNames)
            buf = ReplaceNames(buf, tempActNames, actObjNames)
            f = open(fileName, 'wt')    
            f.write(buf)    
            f.close()     

ProcessFiles(actFiles)
ProcessFiles(regFiles)

